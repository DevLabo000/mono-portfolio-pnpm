/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * ToDo API
 * ToDo„Ç¢„Éó„É™„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type { GetTodos200Item, PatchTodosIdBody, PostTodosBody } from '.././models';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary ToDo‰∏ÄË¶ß„ÇíÂèñÂæó
 */
export const getTodos = (options?: AxiosRequestConfig): Promise<AxiosResponse<GetTodos200Item[]>> => {
  return axios.get(`/todos`, options);
};

export const getGetTodosQueryKey = () => {
  return [`/todos`] as const;
};

export const getGetTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = AxiosError<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({ signal }) =>
    getTodos({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTodos>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getTodos>>>;
export type GetTodosQueryError = AxiosError<void>;

/**
 * @summary ToDo‰∏ÄË¶ß„ÇíÂèñÂæó
 */
export const useGetTodos = <TData = Awaited<ReturnType<typeof getTodos>>, TError = AxiosError<void>>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTodosQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Êñ∞„Åó„ÅÑToDo„Çí‰ΩúÊàê„Åô„Çã
 */
export const postTodos = (postTodosBody: PostTodosBody, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
  return axios.post(`/todos`, postTodosBody, options);
};

export const getPostTodosMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postTodos>>, TError, { data: PostTodosBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postTodos>>, TError, { data: PostTodosBody }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTodos>>, { data: PostTodosBody }> = (props) => {
    const { data } = props ?? {};

    return postTodos(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostTodosMutationResult = NonNullable<Awaited<ReturnType<typeof postTodos>>>;
export type PostTodosMutationBody = PostTodosBody;
export type PostTodosMutationError = AxiosError<unknown>;

/**
 * @summary Êñ∞„Åó„ÅÑToDo„Çí‰ΩúÊàê„Åô„Çã
 */
export const usePostTodos = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postTodos>>, TError, { data: PostTodosBody }, TContext>;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostTodosMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary ToDo„ÇíÊõ¥Êñ∞„Åô„Çã
 */
export const patchTodosId = (
  id: number,
  patchTodosIdBody: PatchTodosIdBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(`/todos/${id}`, patchTodosIdBody, options);
};

export const getPatchTodosIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTodosId>>,
    TError,
    { id: number; data: PatchTodosIdBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchTodosId>>,
  TError,
  { id: number; data: PatchTodosIdBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchTodosId>>,
    { id: number; data: PatchTodosIdBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchTodosId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchTodosId>>>;
export type PatchTodosIdMutationBody = PatchTodosIdBody;
export type PatchTodosIdMutationError = AxiosError<unknown>;

/**
 * @summary ToDo„ÇíÊõ¥Êñ∞„Åô„Çã
 */
export const usePatchTodosId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTodosId>>,
    TError,
    { id: number; data: PatchTodosIdBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPatchTodosIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary ToDo„ÇíÂâäÈô§„Åô„Çã
 */
export const deleteTodosId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
  return axios.delete(`/todos/${id}`, options);
};

export const getDeleteTodosIdMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTodosId>>, TError, { id: number }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteTodosId>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTodosId>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return deleteTodosId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodosId>>>;

export type DeleteTodosIdMutationError = AxiosError<unknown>;

/**
 * @summary ToDo„ÇíÂâäÈô§„Åô„Çã
 */
export const useDeleteTodosId = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTodosId>>, TError, { id: number }, TContext>;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteTodosIdMutationOptions(options);

  return useMutation(mutationOptions);
};
