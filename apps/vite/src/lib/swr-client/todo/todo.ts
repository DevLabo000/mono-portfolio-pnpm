// @ts-nocheck

/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * ToDo API
 * ToDo„Ç¢„Éó„É™„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import useSwr from 'swr';
import type { Arguments, Key, SWRConfiguration } from 'swr';
import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';
import type { GetTodos200Item, PatchTodosIdBody, PostTodosBody } from '.././models';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary ToDo‰∏ÄË¶ß„ÇíÂèñÂæó
 */
export const getTodos = (options?: AxiosRequestConfig): Promise<AxiosResponse<GetTodos200Item[]>> => {
  return axios.get(`/todos`, options);
};

export const getGetTodosKey = () => [`/todos`] as const;

export type GetTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getTodos>>>;
export type GetTodosQueryError = AxiosError<void>;

/**
 * @summary ToDo‰∏ÄË¶ß„ÇíÂèñÂæó
 */
export const useGetTodos = <TError = AxiosError<void>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getTodos>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetTodosKey() : null));
  const swrFn = () => getTodos(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, {
    ...swrOptions,
  });

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Êñ∞„Åó„ÅÑToDo„Çí‰ΩúÊàê„Åô„Çã
 */
export const postTodos = (postTodosBody: PostTodosBody, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
  return axios.post(`/todos`, postTodosBody, options);
};

export const getPostTodosMutationFetcher = (options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return postTodos(arg as PostTodosBody, options);
  };
};
export const getPostTodosMutationKey = () => `/todos` as const;

export type PostTodosMutationResult = NonNullable<Awaited<ReturnType<typeof postTodos>>>;
export type PostTodosMutationError = AxiosError<unknown>;

/**
 * @summary Êñ∞„Åó„ÅÑToDo„Çí‰ΩúÊàê„Åô„Çã
 */
export const usePostTodos = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postTodos>>,
    TError,
    string,
    Arguments,
    Awaited<ReturnType<typeof postTodos>>
  > & { swrKey?: string };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostTodosMutationKey();
  const swrFn = getPostTodosMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary ToDo„ÇíÊõ¥Êñ∞„Åô„Çã
 */
export const patchTodosId = (
  id: number,
  patchTodosIdBody: PatchTodosIdBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(`/todos/${id}`, patchTodosIdBody, options);
};

export const getPatchTodosIdMutationFetcher = (id: number, options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return patchTodosId(id, arg as PatchTodosIdBody, options);
  };
};
export const getPatchTodosIdMutationKey = (id: number) => `/todos/${id}` as const;

export type PatchTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchTodosId>>>;
export type PatchTodosIdMutationError = AxiosError<unknown>;

/**
 * @summary ToDo„ÇíÊõ¥Êñ∞„Åô„Çã
 */
export const usePatchTodosId = <TError = AxiosError<unknown>>(
  id: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof patchTodosId>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof patchTodosId>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPatchTodosIdMutationKey(id);
  const swrFn = getPatchTodosIdMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary ToDo„ÇíÂâäÈô§„Åô„Çã
 */
export const deleteTodosId = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
  return axios.delete(`/todos/${id}`, options);
};

export const getDeleteTodosIdMutationFetcher = (id: number, options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return deleteTodosId(id, options);
  };
};
export const getDeleteTodosIdMutationKey = (id: number) => `/todos/${id}` as const;

export type DeleteTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodosId>>>;
export type DeleteTodosIdMutationError = AxiosError<unknown>;

/**
 * @summary ToDo„ÇíÂâäÈô§„Åô„Çã
 */
export const useDeleteTodosId = <TError = AxiosError<unknown>>(
  id: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteTodosId>>,
      TError,
      string,
      Arguments,
      Awaited<ReturnType<typeof deleteTodosId>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeleteTodosIdMutationKey(id);
  const swrFn = getDeleteTodosIdMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
